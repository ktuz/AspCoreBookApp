// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Data.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Core.Entities.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Author1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Author2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Author3"
                        });
                });

            modelBuilder.Entity("Domain.Core.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("PublishedAt");

                    b.Property<long?>("PublisherId");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Test test",
                            Name = "Book1",
                            Price = 17.15m,
                            PublishedAt = new DateTime(2020, 9, 10, 15, 13, 1, 819, DateTimeKind.Local).AddTicks(3443),
                            PublisherId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Test test",
                            Name = "Book2",
                            Price = 17.15m,
                            PublishedAt = new DateTime(2020, 9, 10, 15, 13, 1, 820, DateTimeKind.Local).AddTicks(1078),
                            PublisherId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Test test",
                            Name = "Book3",
                            Price = 17.15m,
                            PublishedAt = new DateTime(2020, 9, 10, 15, 13, 1, 820, DateTimeKind.Local).AddTicks(1085),
                            PublisherId = 3L
                        });
                });

            modelBuilder.Entity("Domain.Core.Entities.BooksToAuthors", b =>
                {
                    b.Property<long>("BookId");

                    b.Property<long>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BooksToAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 1L,
                            AuthorId = 1L
                        },
                        new
                        {
                            BookId = 2L,
                            AuthorId = 2L
                        },
                        new
                        {
                            BookId = 3L,
                            AuthorId = 3L
                        });
                });

            modelBuilder.Entity("Domain.Core.Entities.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Publisher1"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Publisher2"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Publisher3"
                        });
                });

            modelBuilder.Entity("Domain.Core.Entities.Book", b =>
                {
                    b.HasOne("Domain.Core.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("Domain.Core.Entities.BooksToAuthors", b =>
                {
                    b.HasOne("Domain.Core.Entities.Author", "Author")
                        .WithMany("BooksToAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Core.Entities.Book", "Book")
                        .WithMany("BooksToAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
